1. 简单目录结构
project_name/
│
├── include/         # 头文件目录
│   └── project.h
│
├── src/             # 源代码目录
│   └── main.c
│   └── project.c
│
└── makefile         # 编译脚本

2. 模块化目录结构
project_name/
│
├── include/         # 公共头文件目录
│   └── common.h
│
├── src/             # 源代码目录
│   ├── module1/     # 模块1
│   │   ├── include/ # 模块1的头文件目录
│   │   │   └── module1.h
│   │   └── src/     # 模块1的源文件目录
│   │       └── module1.c
│   ├── module2/     # 模块2
│   │   ├── include/ # 模块2的头文件目录
│   │   │   └── module2.h
│   │   └── src/     # 模块2的源文件目录
│   │       └── module2.c
│   └── main.c       # 主程序源文件
│
└── makefile         # 编译脚本

3. 分层目录结构（分层模型）
project_name/
│
├── include/         # 公共头文件目录
│   └── common.h
│
├── src/             # 源代码目录
│   ├── app/         # 应用层代码
│   │   └── main.c   # 主程序源文件
│   ├── logic/       # 业务逻辑层代码
│   │   └── logic.c  # 业务逻辑处理代码
│   └── data/        # 数据访问层代码
│       └── data.c   # 数据访问代码
│
└── makefile         # 编译脚本

4. 使用第三方库和工具的目录结构
project_name/
│
├── include/         # 项目头文件目录（包含第三方库的头文件）
│   ├── project/     # 项目自定义头文件目录
│   │   └── project.h
│   └── third_party/ # 第三方库头文件目录（例如，json, http等）
│       └── json.h   # 第三方库头文件示例
│       └── http.h   # 第三方库头文件示例
│       └── ...      # 其他第三方库头文件
│
├── src/             # 项目源代码目录（包含第三方库的源码或链接的库）
│   ├── project/     # 项目自定义源码目录
│   │   └── main.c   # 主程序源文件
│   └── third_party/ # 第三方库源码或链接的库目录（可选）
│       └── json.c   # 第三方库源码示例（如果包含）
│       └── http.c   # 第三方库源码示例（如果包含）
│       └── ...      # 其他第三方库源码或链接的库（如果包含）
│       └── lib      # 链接的库文件目录（如果使用链接的库）
│           └── libjson.a  # 链接的库文件示例（如果使用链接的库）
│           └── libhttp.a  # 链接的库文件示例（如果使用链接的库）
│           └── ...       # 其他链接的库文件（如果使用链接的库）
│           └── include   # 链接的库的头文件目录（如果需要）
│               └── json.h  #